import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt
from scipy.spatial import KDTree

# New Antecedent/Consequent objects hold universe variables and membership functions
temperature = ctrl.Antecedent(np.arange(-4, 51, 1), 'temperature')
precipitation = ctrl.Antecedent(np.arange(0, 2001, 1), 'precipitation')
elevation = ctrl.Antecedent(np.arange(0, 6001, 1), 'elevation')
NVDI = ctrl.Antecedent(np.arange(-1, 1.01, 0.01), 'NVDI')
insect = ctrl.Consequent(np.arange(0, 2.01, 0.01), 'insect')

# Gaussian membership functions
temperature['cool'] = fuzz.gaussmf(temperature.universe, 0, 5)  # mean=0, sigma=5
temperature['warm'] = fuzz.gaussmf(temperature.universe, 20, 5)  # mean=20, sigma=5
temperature['hot'] = fuzz.gaussmf(temperature.universe, 40, 5)   # mean=40, sigma=5

precipitation['low'] = fuzz.gaussmf(precipitation.universe, 100, 100)  # mean=100, sigma=100
precipitation['moderate'] = fuzz.gaussmf(precipitation.universe, 500, 200)  # mean=500, sigma=200
precipitation['high'] = fuzz.gaussmf(precipitation.universe, 1000, 300)  # mean=1000, sigma=300

elevation['plain'] = fuzz.gaussmf(elevation.universe, 1000, 500)  # mean=1000, sigma=500
elevation['lowland'] = fuzz.gaussmf(elevation.universe, 3000, 500)  # mean=3000, sigma=500
elevation['highland'] = fuzz.gaussmf(elevation.universe, 5000, 500)  # mean=5000, sigma=500

NVDI['bad'] = fuzz.gaussmf(NVDI.universe, -0.5, 0.25)  # mean=-0.5, sigma=0.25
NVDI['good'] = fuzz.gaussmf(NVDI.universe, 0, 0.25)    # mean=0, sigma=0.25
NVDI['better'] = fuzz.gaussmf(NVDI.universe, 0.5, 0.25)  # mean=0.5, sigma=0.25

# Gaussian membership functions for insect populations
insect['low'] = fuzz.gaussmf(insect.universe, 0, 0.5)  # mean=0, sigma=0.5
insect['moderate'] = fuzz.gaussmf(insect.universe, 1, 0.3)  # mean=1, sigma=0.3
insect['high'] = fuzz.gaussmf(insect.universe, 2, 0.5)  # mean=2, sigma=0.5



# Define rules with Gaussian membership functions
rules = []

# Rule set for high insects
rules.append(ctrl.Rule(temperature['hot'] & precipitation['low'] & elevation['plain'] & NVDI['bad'], insect['high']))
rules.append(ctrl.Rule(temperature['hot'] & precipitation['moderate'] & elevation['plain'] & NVDI['good'], insect['high']))
rules.append(ctrl.Rule(temperature['hot'] & precipitation['low'] & elevation['lowland'] & NVDI['bad'], insect['high']))
rules.append(ctrl.Rule(temperature['hot'] & precipitation['moderate'] & elevation['lowland'] & NVDI['good'], insect['high']))
rules.append(ctrl.Rule(temperature['hot'] & precipitation['high'] & elevation['plain'] & NVDI['bad'], insect['high']))
rules.append(ctrl.Rule(temperature['hot'] & precipitation['high'] & elevation['lowland'] & NVDI['good'], insect['high']))

rules.append(ctrl.Rule(temperature['warm'] & precipitation['low'] & elevation['plain'] & NVDI['bad'], insect['high']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['moderate'] & elevation['plain'] & NVDI['good'], insect['high']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['low'] & elevation['lowland'] & NVDI['bad'], insect['high']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['high'] & elevation['plain'] & NVDI['bad'], insect['high']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['moderate'] & elevation['lowland'] & NVDI['better'], insect['high']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['high'] & elevation['lowland'] & NVDI['good'], insect['high']))

# Rule set for moderate insects
rules.append(ctrl.Rule(temperature['hot'] & precipitation['moderate'] & elevation['plain'] & NVDI['bad'], insect['moderate']))
rules.append(ctrl.Rule(temperature['hot'] & precipitation['high'] & elevation['lowland'] & NVDI['bad'], insect['moderate']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['moderate'] & elevation['lowland'] & NVDI['good'], insect['moderate']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['high'] & elevation['highland'] & NVDI['better'], insect['moderate']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['moderate'] & elevation['highland'] & NVDI['better'], insect['moderate']))
rules.append(ctrl.Rule(temperature['cool'] & precipitation['moderate'] & elevation['lowland'] & NVDI['better'], insect['moderate']))
rules.append(ctrl.Rule(temperature['hot'] & precipitation['moderate'] & elevation['highland'] & NVDI['bad'], insect['moderate']))
rules.append(ctrl.Rule(temperature['cool'] & precipitation['moderate'] & elevation['plain'] & NVDI['bad'], insect['moderate']))
rules.append(ctrl.Rule(temperature['cool'] & precipitation['high'] & elevation['lowland'] & NVDI['good'], insect['moderate']))

# Rule set for low insects
rules.append(ctrl.Rule(temperature['cool'] & precipitation['high'] & elevation['highland'] & NVDI['bad'], insect['low']))
rules.append(ctrl.Rule(temperature['cool'] & precipitation['moderate'] & elevation['plain'] & NVDI['good'], insect['low']))
rules.append(ctrl.Rule(temperature['cool'] & precipitation['high'] & elevation['highland'] & NVDI['better'], insect['low']))
rules.append(ctrl.Rule(temperature['cool'] & precipitation['low'] & elevation['highland'] & NVDI['better'], insect['low']))
rules.append(ctrl.Rule(temperature['cool'] & precipitation['moderate'] & elevation['highland'] & NVDI['good'], insect['low']))
rules.append(ctrl.Rule(temperature['hot'] & precipitation['low'] & elevation['highland'] & NVDI['good'], insect['low']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['low'] & elevation['plain'] & NVDI['bad'], insect['low']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['moderate'] & elevation['lowland'] & NVDI['bad'], insect['low']))
rules.append(ctrl.Rule(temperature['warm'] & precipitation['low'] & elevation['lowland'] & NVDI['good'], insect['low']))

# Catch-all rule for sparse cases
default_rule = ctrl.Rule(temperature['cool'] & precipitation['low'] & elevation['plain'] & NVDI['bad'], insect['low'])
rules.append(default_rule)

# Control system
insect_ctrl = ctrl.ControlSystem(rules)
insect_sim = ctrl.ControlSystemSimulation(insect_ctrl)

# Dictionary to store valid outputs for interpolation
valid_inputs = []
valid_outputs = []

# Running the fuzzy system with a range of inputs
for temp in np.linspace(-4, 50, 10):
    for precip in np.linspace(0, 2000, 10):
        for elev in np.linspace(0, 6000, 10):
            for nvdi in np.linspace(-1, 1, 10):

                # Original system run
                input_dict = {'temperature': temp, 'precipitation': precip, 'elevation': elev, 'NVDI': nvdi}
                insect_sim.inputs(input_dict)

                try:
                    insect_sim.compute()
                    crisp_output = insect_sim.output['insect'].item()

                    # Store successful inputs and outputs for future interpolation
                    valid_inputs.append([temp, precip, elev, nvdi])
                    valid_outputs.append(crisp_output)

                    print(f"Inputs: Temperature {temp}, Precipitation {precip}, Elevation {elev}, NVDI {nvdi}")
                    print(f"Crisp Output: {crisp_output}")
                except ValueError:
                    # If defuzzification fails, interpolate using closest valid inputs
                    if valid_inputs:
                        tree = KDTree(valid_inputs)
                        distance, index = tree.query([temp, precip, elev, nvdi])
                        interpolated_output = valid_outputs[index]

                        print(f"Inputs: Temperature {temp}, Precipitation {precip}, Elevation {elev}, NVDI {nvdi}")
                        print(f"Interpolated Output: {interpolated_output}")
                    else:
                        # If no valid outputs are available yet, return 'NA'
                        print(f"Inputs: Temperature {temp}, Precipitation {precip}, Elevation {elev}, NVDI {nvdi}")
                        print("Output: NA (No previous data for interpolation)")
